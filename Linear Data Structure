#Q1. Write a program to find all pairs of an integer array whose sum is equal to a given number?

def sum_num(array,num,sum):
  for i in range(num):
    for j  in range(i+1,num):
      if array[i] + array[j] == sum:
        print("(",array[i],",",array[j],")",sep=' ')
array=[1,2,3,4,5,6,7,8,10]

num=len(array)

sum=14

sum_num(array,num,sum)
 
 solution:-
( 4 , 10 )
( 6 , 8 )



#Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.

def reverse_array(array):
      array=array[::-1]
      print(array)

print("array")
array=[5,6,8,9,1,3]
print(array)
print("reverse_array")
reverse_array(array)

solution:-
array
[5, 6, 8, 9, 1, 3]
reverse_array
[3, 1, 9, 8, 6, 5]


Q3. Write a program to check if two strings are a rotation of each other?

def is_rotation(str1,str2):
  if len(str1)!=len(str2):
    return False
  else:
    return True 
str1='abcdef'
str2='dcgfhr'

if is_rotation(str1,str2):
  print('yes,two string rotating to each other ')

else:
  print('No,two string cant rotating to each other')

solution:-
No,two string cant rotating to each other



Q4. Write a program to print the first non-repeated character from a string?

strg = input(' ')

frequency = {}
for i in strg:
    frequency[i] = strg.count(i)

for j in strg:
    if frequency[j] == 1:
        print(f"{j} is the non repeated character of input '{strg}'")
        break
solution:-     
 aadate
d is the non repeated character of input 'aadate'


Q5.Read about the Tower of Hanoi algorithm. Write a program to implement it.

def TowerOfHanoi(n , from_rod, to_rod, aux_rod):
    if n == 1:
        print("Move disk 1 from rod",from_rod,"to rod",to_rod)
        return
    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod)
    print("Move disk",n,"from rod",from_rod,"to rod",to_rod)
    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)
    
n = 3
TowerOfHanoi(n, 'A', 'C', 'B')

solution:-
Move disk 1 from rod A to rod C
Move disk 2 from rod A to rod B
Move disk 1 from rod C to rod B
Move disk 3 from rod A to rod C
Move disk 1 from rod B to rod A
Move disk 2 from rod B to rod C
Move disk 1 from rod A to rod C


Q6. Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.

expression = "ABC/-AK/L-*"
operators = ["-", "+", "/", "*"]
stack = []

for i in expression:
    if i in operators:
        operand1 = stack.pop()
        operand2 = stack.pop()
        result = i + operand2 + operand1
        stack.append(result)
    else:
        stack.append(i)

print(f"Prefix expression: {expression},\nPostfix expression:  {stack[0]}")

solution:-     
Prefix expression: ABC/-AK/L-*,
Postfix expression:  *-A/BC-/AKL


Q7. Write a program to convert prefix expression to infix expression.

def prefixToInfix(expression):
    stack = []
    # we need to reverse the expression to add operands first in the stack before operators
    exp = expression[::-1]

    for char in exp:
        if char in ["+", "-", "*", "/"]:
            operand1 = stack.pop()
            operand2 = stack.pop()
            result = operand1 + char + operand2
            stack.append(result)
            
        else:
            stack.append(char)

    return result

prefixToInfix("+-*AB/CDE")

solution:-
'A*B-C/D+E'


Q8. Write a program to check if all the brackets are closed in a given code snippet.

def checkBrackets(snippet):

    stack = []
    closingBracketsData = {'{': '}', '[': ']', '(': ')'}

    for char in snippet:
      
        if char in closingBracketsData:
            stack.append(char)  

        elif char in closingBracketsData.values():
            if not stack:
                return False
            elif closingBracketsData[stack[-1]] != char:
                return False
            else:
                stack.pop()
    
    return not stack


print(checkBrackets("{([()]}")) # False
print(checkBrackets("{[(])}")) # False
print(checkBrackets("{[{[{[{{[[(())]]}}]}]}]}")) # True
 
solution:-
False
False
True


Q9. Write a program to reverse a stack.

class Stack:

    def __init__(self):
        self.Elements = []

    def push(self, value):
        self.Elements.append(value)
        
    def pop(self):
        return self.Elements.pop()
    
    def empty(self):
        return self.Elements == []

    def show(self):
        for value in reversed(self.Elements):
            print(value)

def BottomInsert(s, value):

    if s.empty():

        s.push(value)

    else:
        popped = s.pop()
        BottomInsert(s, value)
        s.push(popped)

def Reverse(s):
    if s.empty():
        pass
    else:
        popped = s.pop()
        Reverse(s)
        BottomInsert(s, popped)

stk = Stack()

stk.push(1)
stk.push(2)
stk.push(3)
stk.push(4)
stk.push(5)

print("Original Stack")
stk.show()

print("\nStack after Reversing")
Reverse(stk)
stk.show()
     
solution:-
Original Stack
5
4
3
2
1

Stack after Reversing
1
2
3
4
5


Q10. Write a program to find the smallest number using a stack.

def smallestStackVal(stack):

    popped_element = stack.pop()
    for val in stack:
        if val < popped_element:
            popped_element = val

    return popped_element

stack = [1,5,-988,9,-19,-3,9,7,6,7,-222]
smallestStackVal(stack)
     
  solution:-   
-988
































































































































